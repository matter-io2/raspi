// vim:ai:et:fenc=utf-8:ff=unix:sw=4:ts=4:

digraph
{
  rankdir=TB;

  edge[
  fontsize = 16
  fontcolor = "Red"
  ]

  "4_IS_P_REGISTER_DEFINED?" [shape=rectangle];
  "IS_*_REGISTER_DEFINED?" [shape=rectangle];
  "IS_A_AND_B_DEFINED?" [shape=rectangle];
  "1_ARE_A_AND_B_REGISTERS_DEFINED?" [shape=rectangle];
  "92_ARE_A_AND_B_REGISTERS_DEFINED?" [shape=rectangle];
  "IS_E_REGISTER_DEFINED?" [shape=diamond];
  "IS_*_REGISTER_A_FLAG?" [shape=diamond];
  "RECOGNIZED_CODE?" [shape=diamond];
  "EXTRA_REGISTERS_PRESENT?" [shape=diamond];
  "RECOGNIZED_CODE?" -> "UNRECOGNIZED_CODE_ERROR" [label="no"];
  "RECOGNIZED_CODE?" -> "EXTRA_REGISTERS_PRESENT?" [label="yes"];
  "EXTRA_REGISTERS_PRESENT?" -> "EXTRA_REGISTER_ERROR" [weight=10 label="yes"];
  "EXTRA_REGISTERS_PRESENT?" -> "CODE=1" [weight=10 label="no"];
  "EXTRA_REGISTERS_PRESENT?" -> "CODE=4" [weight=10 label="no"];
  "EXTRA_REGISTERS_PRESENT?" -> "CODE=92" [weight=10 label="no"];
  "EXTRA_REGISTERS_PRESENT?" -> "CODE=130" [weight=10 label="no"];
  "EXTRA_REGISTERS_PRESENT?" -> "CODE=161" [weight=10 label="no"];
  "EXTRA_REGISTERS_PRESENT?" -> "CODE=162" [weight=10 label="no"];
  "CODE=1" -> "PROCESS_LINEAR_INTERPOLATION" [weight=15];
  "PROCESS_LINEAR_INTERPOLATION" -> "IS_E_REGISTER_DEFINED?";
  "IS_E_REGISTER_DEFINED?" -> "IS_A_OR_B_REGISTER_DEFINED?" [label="yes"];
  "IS_A_OR_B_REGISTER_DEFINED?" -> "CONFLICTING_CODES_ERROR" [label="yes"];
  "IS_A_OR_B_REGISTER_DEFINED?" -> "1_UPDATE_SM_POSITION" [label="no"];
  "IS_E_REGISTER_DEFINED?" -> "1_ARE_A_AND_B_REGISTERS_DEFINED?" [label="no"];
  "1_ARE_A_AND_B_REGISTERS_DEFINED?" -> "1_UPDATE_SM_POSITION" [label="no"];
  "1_UPDATE_SM_POSITION" -> "1_CALCULATE_DDA_POSITION";
  "1_CALCULATE_DDA_POSITION" -> "MOVETO_POSITION";
  "CODE=4" -> "PROCESS_DWELL" [weight=15];
  "PROCESS_DWELL" -> "4_IS_P_REGISTER_DEFINED?";
  "4_IS_P_REGISTER_DEFINED?" -> "DWELL";
  "IS_*_REGISTER_DEFINED?" -> "MISSING_REGISTER_ERROR" [label="no"];
  "IS_*_REGISTER_DEFINED?" -> "IS_*_REGISTER_A_FLAG?" [label="yes"];
  "IS_*_REGISTER_A_FLAG?" -> "INVALID_REGISTER_ERROR" [label="yes"];
  "IS_*_REGISTER_A_FLAG?" -> "*_REGISTER_CHECK_RETURN" [label="no"];
  "CODE=92" -> "PROCESS_SET_POSITION" [weight=15];
  "PROCESS_SET_POSITION" -> "92_ARE_A_AND_B_REGISTERS_DEFINED?";
  "92_ARE_A_AND_B_REGISTERS_DEFINED?" -> "92_UPDATE_SM_POSITION";
  "92_UPDATE_SM_POSITION" -> "SET_POSITION";
  "CODE=130" -> "PROCESS_SET_POTENTIOMETER_VALUES" [weight=15];
  "PROCESS_SET_POTENTIOMETER_VALUES" -> "SET_POTENTIOMETER_VALUES";
  "CODE=161" -> "PROCESS_FIND_AXES_MINIMUMS" [weight=15];
  "PROCESS_FIND_AXES_MINIMUMS" -> "161_IS_F_REGISTER_DEFINED?";
  "161_IS_F_REGISTER_DEFINED?" -> "161_CALCULATE_DDA_SPEED";
  "161_CALCULATE_DDA_SPEED" -> "FIND_AXES_MINIMUMS";
  "FIND_AXES_MINIMUMS" -> "LOSE_POSITION";
  "CODE=162" -> "PROCESS_FIND_AXES_MAXIMUMS" [weight=15];
  "PROCESS_FIND_AXES_MAXIMUMS" -> "162_IS_F_REGISTER_DEFINED?";
  "162_IS_F_REGISTER_DEFINED?" -> "162_CALCULATE_DDA_SPEED";
  "162_CALCULATE_DDA_SPEED" -> "FIND_AXES_MAXIMUMS";
  "FIND_AXES_MAXIMUMS" -> "LOSE_POSITION";
  "IS_A_AND_B_DEFINED?" -> "A_AND_B_DEFINED_ERROR" [label="yes"];
  "IS_A_AND_B_DEFINED?" -> "A_AND_B_CHECK_RETURN" [label="no"];
}
